generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  // application 
  quotaLimit Int?
  plan       Plan?   @default(FREE)
  apiKey     String? @unique @default(cuid())
  discordId  String?

  eventCategories EventCategory[]
  events          Event[]
  quota           Quota[]

  @@unique([email])
  @@index([email, apiKey])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// application
model EventCategory {
  id    String @id @default(cuid())
  name  String
  color Int
  emoji String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@unique([name, userId])
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}

model Event {
  id              String @id @default(cuid())
  formatedMessage String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventCategory   EventCategory? @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String?

  @@index([createdAt])
}

model Quota {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  year  Int
  month Int
  count Int @default(0)

  updatedAt DateTime @updatedAt
}
